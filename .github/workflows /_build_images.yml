name: Build and Push to Harbor

on:
  workflow_call:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'app/backend/Dockerfile'
      - 'app/backend/main.py'
      - 'app/frontend/Dockerfile'
      - 'app/frontend/main.py'
jobs:
  build_docker_images:
    runs-on: [self-hosted]
    container:
      image: docker:latest
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login to GitHub Registry
        uses: docker/login-action@v3
        with: 
          registry: ${{ secrets.HARBOR_URL }}
          username: ${{ secrets.HARBOR_USER }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Determine changed directory
        id: changes
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "app/backend/"; then
            echo "backend=true" >> $GITHUB_ENV
          fi
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "app/frontend/"; then
            echo "frontend=true" >> $GITHUB_ENV
          fi

      - name: Extract image version from backend
        if: env.backend == 'true'
        run: |
          export IMAGE_VERSION=$(grep 'image_version =' app/backend/main.py | awk -F '"' '{print $2}')
          echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV

      - name: Extract image version from frontend
        if: env.frontend == 'true'
        run: |
          export IMAGE_VERSION=$(grep 'image_version =' app/frontend/main.py | awk -F '"' '{print $2}')
          echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          push: true
          no-cache: true
          context: ${{ env.CONTEXT }}
          tags: ${{ steps.meta.outputs.tags }} 
